{"version":3,"sources":["components/SearchEmoji.js","components/Emoji.js","components/SearchResult.js","components/filterEmoji.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","styled","div","SearchInput","input","SearchEmoji","state","searchText","TextChange","e","setState","target","value","props","HandleChange","this","type","onChange","React","Component","Row","Emoji","span","emoji","codePointHex","symbol","codePointAt","toString","src","data-clipboard-text","className","alt","title","Result","SearchResult","clipboard","Clipboard","destroy","emojiRows","emojis","map","key","filterEmoji","maxResult","emojiList","filter","toLowerCase","includes","keywords","slice","Header","App","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"smtKAGA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAAcF,IAAOG,MAAV,KA8BFC,E,4MArBXC,MAAQ,CACJC,WAAY,I,EAGhBC,WAAa,SAAAC,GACT,EAAKC,SAAS,CACVH,WAAYE,EAAEE,OAAOC,QAEzB,EAAKC,MAAMC,aAAa,EAAKR,MAAMC,a,uDAG9B,IACEA,EAAcQ,KAAKT,MAAnBC,WACP,OACI,kBAACP,EAAD,KACI,kBAACG,EAAD,CAAaa,KAAK,OAAOJ,MAAOL,EAAYU,SAAUF,KAAKP,kB,GAhBjDU,IAAMC,W,2yBChBhC,IAAMC,EAAMnB,IAAOC,IAAV,KAwDMmB,GAlBFpB,IAAOqB,KAAV,KAKI,SAACT,GACX,IAAMU,EAAQV,EAAMU,MACdC,EAAeD,EAAME,OAAOC,YAAY,GAAGC,SAAS,IACpDC,EAAG,iDAA6CJ,EAA7C,QACT,OACI,kBAACJ,EAAD,CAAKS,sBAAqBN,EAAME,OAAQK,UAAU,qBAC9C,yBAAKC,IAAKR,EAAMS,MAAOJ,IAAKA,IAC5B,0BAAME,UAAU,SAASP,EAAMS,OAC/B,0BAAMF,UAAU,QAAhB,0B,yICjDZ,IAAMG,EAAShC,IAAOC,IAAV,KA+BGgC,E,kDAzBX,WAAYrB,GAAO,uCACTA,G,gEAINE,KAAKoB,UAAY,IAAIC,IAAU,wB,6CAI/BrB,KAAKoB,UAAUE,Y,+BAInB,IACMC,EADSvB,KAAKF,MAAM0B,OACDC,KAAI,SAAAjB,GAAK,OAC9B,kBAAC,EAAD,CAAOkB,IAAKlB,EAAMS,MAAML,WAAYJ,MAAOA,OAE/C,OACI,kBAACU,EAAD,KACIK,O,GApBepB,IAAMC,W,QCMlBuB,EAdK,SAACnC,EAAYoC,GAC7B,OAAOC,EACFC,QAAO,SAAAtB,GACJ,QAAIA,EAAMS,MAAMc,cAAcC,SAASxC,EAAWuC,kBAG9CvB,EAAMyB,SAASD,SAASxC,MAK/B0C,MAAM,EAAEN,I,+VCNjB,IAAMO,EAASjD,IAAOC,IAAV,KA2DGiD,E,4MAtCb7C,MAAQ,CACNiC,OAAQG,EAAY,GAAG,K,EAGzB5B,aAAe,SAAAF,GACb,EAAKF,SAAS,CACZ6B,OAAQG,EAAY9B,EAAM,O,uDAIrB,IACA2B,EAAUxB,KAAKT,MAAfiC,OACP,OACE,oCACE,kBAACW,EAAD,KACE,yBACAtB,IAAI,mDACJwB,MAAM,KACNC,OAAO,KACPtB,IAAI,KAEJ,4CACA,yBACAH,IAAI,mDACJwB,MAAM,KACNC,OAAO,KACPtB,IAAI,MAGN,kBAAC,EAAD,CACEjB,aAAcC,KAAKD,eAErB,kBAAC,EAAD,CAAcyB,OAAQA,S,GAjCZrB,IAAMC,WCfJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f7d351b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchBar = styled.div`\r\n    top: 30%;\r\n    position: relative;\r\n    padding:10px;\r\n    margin: auto;\r\n    border-bottom: 1px solid gray;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px 10px;\r\n    border-radius: 4px;\r\n    border: 1px solid gray;\r\n    font-size: 25px;\r\n`;\r\n\r\nclass SearchEmoji extends React.Component {\r\n    state = {\r\n        searchText: \"\"\r\n    }\r\n\r\n    TextChange = e => {\r\n        this.setState({\r\n            searchText: e.target.value\r\n        })\r\n        this.props.HandleChange(this.state.searchText);\r\n    }\r\n\r\n    render(){\r\n        const {searchText} = this.state;\r\n        return(\r\n            <SearchBar>\r\n                <SearchInput type='text' value={searchText} onChange={this.TextChange}/>\r\n            </SearchBar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchEmoji","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Row = styled.div`\r\n    border-bottom: 1px solid grey;\r\n    height: auto;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n\r\n    & .title {\r\n        color: black;\r\n        top: -5px;\r\n        position: relative;\r\n    }\r\n\r\n    & .copy {\r\n        float: right;\r\n        top: 5px;\r\n        right: 10px;\r\n        position: relative;\r\n        visibility: hidden;\r\n        color: #ccc;\r\n    }\r\n\r\n    & img {\r\n        width: 32px;\r\n        height: 32px;\r\n        color: #e6e600;\r\n        margin-right: 10px;\r\n    }\r\n\r\n    &:hover .copy {\r\n        visibility: visible;\r\n    }\r\n\r\n    &:hover {\r\n        background-color: #b3b3b3;\r\n    }\r\n`;\r\n\r\nconst Text = styled.span`\r\n    position: relative;\r\n    float: right;\r\n`;\r\n\r\nconst Emoji = (props) => {\r\n    const emoji = props.emoji;\r\n    const codePointHex = emoji.symbol.codePointAt(0).toString(16);\r\n    const src = `//cdn.jsdelivr.net/emojione/assets/png/${codePointHex}.png`;\r\n    return(\r\n        <Row data-clipboard-text={emoji.symbol} className='copy-to-clipboard'>\r\n            <img alt={emoji.title} src={src}></img>\r\n            <span className='title'>{emoji.title}</span>\r\n            <span className='copy'>Click to copy emoji</span>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Emoji","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Emoji from './Emoji';\r\nimport Clipboard from 'clipboard';\r\n\r\nconst Result = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nclass SearchResult extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.clipboard = new Clipboard('.copy-to-clipboard');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clipboard.destroy();\r\n    }\r\n\r\n    render() {\r\n    const emojis = this.props.emojis;\r\n    const emojiRows = emojis.map(emoji => (\r\n        <Emoji key={emoji.title.toString()} emoji={emoji}></Emoji>\r\n    ));\r\n    return(\r\n        <Result>\r\n           {emojiRows}\r\n        </Result>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResult","import emojiList from './emojiList.json';\r\n\r\nconst filterEmoji = (searchText, maxResult) => {\r\n    return emojiList\r\n        .filter(emoji => {\r\n            if (emoji.title.toLowerCase().includes(searchText.toLowerCase())) {\r\n                return true\r\n            }\r\n            if (emoji.keywords.includes(searchText)){\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n        .slice(0,maxResult);\r\n}\r\n\r\nexport default filterEmoji","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport SearchEmoji from './SearchEmoji';\nimport SearchResult from './SearchResult';\nimport filterEmoji from './filterEmoji';\n\nconst Header = styled.div`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 15px;\n  margin-top: 10px;\n\n  & > h1 {\n    margin: 0;\n    font-size: 30px;\n    font-weight: 600;\n  }\n\n  &:first-child {\n    font-size: 60px;\n  }\n`;\n\n\nclass App extends React.Component {\n  state = {\n    emojis: filterEmoji(\"\",20)\n  };\n\n  HandleChange = value => {\n    this.setState({\n      emojis: filterEmoji(value,20)\n    })\n  };\n\n  render(){\n    const {emojis} = this.state;\n    return (\n      <>\n        <Header>\n          <img\n          src=\"//cdn.jsdelivr.net/emojione/assets/png/1f638.png\"\n          width=\"32\"\n          height=\"32\"\n          alt=\"\"\n          />\n          <h1>Emoji Search</h1>\n          <img\n          src=\"//cdn.jsdelivr.net/emojione/assets/png/1f638.png\"\n          width=\"32\"\n          height=\"32\"\n          alt=\"\"\n          />\n        </Header>\n        <SearchEmoji\n          HandleChange={this.HandleChange}\n        />\n        <SearchResult emojis={emojis}/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}